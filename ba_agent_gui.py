import os
import gradio as gr
from dotenv import load_dotenv
from google import genai

# Set your Gemini API key directly (as per user request)
GEMINI_API_KEY = "AIzaSyAffhT8tHdD2r-DqvaFhUfcg5F8pU0edok"

# Set up Gemini client (user's code style)
client = genai.Client(api_key=GEMINI_API_KEY)

OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Deliverable options
DELIVERABLES = [
    "Stakeholder Map (as a Mermaid diagram)",
    "Process Flow of the new loan uptake journey (as a Mermaid diagram)",
    "Business Requirement Document (BRD)",
    "Functional Requirement Specification (FRS), including Non-Functional Requirements",
    "Use Case Diagrams and detailed Scenarios for three specific cases",
    "Data Mapping Sheet and Data Requirements Analysis",
    "Functional Scope Summary (In/Out of Scope)",
    "Suggested KPIs for success measurement"
]

DEFAULT_BUSINESS_PROBLEM = '''We need to improve the uptake of our loan products (home, personal, auto, educational) through our mobile banking app. Current mobile app engagement is high for other features, but loan uptake is low.\n\nObjective: Design a solution that uses customer data to personalize and improve the visibility, relevance, and uptake of loan products on the mobile Banking app.'''

def make_prompt(business_problem, selected_deliverables):
    deliverable_list = "\n".join(f"- {d}" for d in selected_deliverables)
    prompt = f"""
You are an expert Business Analyst specializing in banking and fintech. Your task is to analyze the following business problem and generate the selected business analysis documents and diagrams. Use Markdown for documents and Mermaid syntax for diagrams.

Business Problem:
{business_problem}

Deliverables to generate:
{deliverable_list}

For each deliverable, provide a clear section header and the content or diagram in Markdown. For diagrams, use only Mermaid syntax and label them clearly.
"""
    return prompt

def generate_selected_documents(business_problem, selected_deliverables, progress=gr.Progress(track_tqdm=True)):
    if not selected_deliverables:
        return "Please select at least one deliverable.", [], ""
    prompt = make_prompt(business_problem, selected_deliverables)
    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=prompt
    )
    full_text = response.text
    # Split the output into sections based on headers
    sections = {}
    current_section = None
    current_content = []
    for line in full_text.splitlines():
        if line.strip().startswith("#") or line.strip().startswith("**"):
            if current_section and current_content:
                sections[current_section] = "\n".join(current_content).strip()
            current_section = line.strip().strip("#* ")
            current_content = []
        else:
            current_content.append(line)
    if current_section and current_content:
        sections[current_section] = "\n".join(current_content).strip()
    # Save each section as a Markdown file
    file_paths = []
    total_files = len(sections)
    for idx, (title, content) in enumerate(sections.items(), 1):
        safe_title = title.replace(" ", "_").replace("/", "_").replace("-", "_")
        filename = f"{idx:02d}_{safe_title}.md"
        path = os.path.join(OUTPUT_DIR, filename)
        with open(path, "w", encoding="utf-8") as f:
            f.write(f"# {title}\n\n{content}")
        file_paths.append(path)
        if total_files > 0:
            progress(idx / total_files)
    # Add a README
    with open(os.path.join(OUTPUT_DIR, "README.md"), "w", encoding="utf-8") as f:
        f.write("This directory contains the business analysis deliverables generated by the BA Agent using Gemini.")
    return f"Generated {len(file_paths)} documents.", file_paths, ""

def list_output_files():
    files = []
    for fname in os.listdir(OUTPUT_DIR):
        fpath = os.path.join(OUTPUT_DIR, fname)
        if os.path.isfile(fpath):
            files.append(fpath)
    return files

def read_file_content(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()

def gradio_interface():
    with gr.Blocks() as demo:
        gr.Markdown("# Business Analyst Agent (Gemini)")
        business_problem = gr.Textbox(label="Business Problem / Objective", value=DEFAULT_BUSINESS_PROBLEM, lines=6)
        deliverable_checkboxes = gr.CheckboxGroup(choices=DELIVERABLES, value=DELIVERABLES, label="Select Deliverables to Generate")
        run_btn = gr.Button("Generate Selected Documents")
        status = gr.Textbox(label="Status", interactive=False)
        file_list = gr.Dropdown(choices=list_output_files(), label="Select Output File", interactive=True)
        file_content = gr.Textbox(label="File Content", lines=20, interactive=False)
        download_btn = gr.File(label="Download Selected File", interactive=False)

        def run_and_update(bp, sel):
            msg, file_paths, _ = generate_selected_documents(bp, sel)
            return msg, list_output_files(), "", None

        def show_file_content(selected):
            if selected:
                content = read_file_content(selected)
                return content, selected
            return "", None

        run_btn.click(run_and_update, inputs=[business_problem, deliverable_checkboxes], outputs=[status, file_list, file_content, download_btn])
        file_list.change(show_file_content, inputs=file_list, outputs=[file_content, download_btn])
    return demo

if __name__ == "__main__":
    gradio_interface().launch() 